Terminals unused in grammar

   BOOL


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROG ID ';' block PERIOD

    3 block: variables cmpdstmt

    4 variables: %empty
    5          | VAR vardcls

    6 vardcls: vardcls vardcl ';'
    7        | vardcl ';'
    8        | error ';'

    9 vardcl: idlist ':' type

   10 idlist: idlist ',' ID
   11       | ID

   12 type: ARRAY '[' ICONST ']' OF INT
   13     | INT

   14 stmtlist: stmtlist ';' stmt
   15         | stmt
   16         | error

   17 stmt: ifstmt
   18     | fstmt
   19     | astmt
   20     | writestmt
   21     | cmpdstmt

   22 cmpdstmt: BEG stmtlist END

   23 $@2: %empty

   24 $@3: %empty

   25 ifstmt: ifhead $@2 THEN stmt $@3 ELSE stmt

   26 ifhead: IF condexp

   27 $@4: %empty

   28 $@5: %empty

   29 fstmt: FOR $@4 ctrlexp $@5 DO stmt

   30 astmt: lhs ASG exp

   31 lhs: ID
   32    | ID '[' exp ']'

   33 writestmt: PRINT '(' exp ')'

   34 exp: exp '+' exp
   35    | exp '-' exp
   36    | exp '*' exp
   37    | ID
   38    | ID '[' exp ']'
   39    | ICONST
   40    | error

   41 ctrlexp: ID ASG ICONST ',' ICONST
   42        | error

   43 condexp: exp NEQ exp
   44        | exp EQ exp
   45        | exp LT exp
   46        | exp LEQ exp
   47        | error


Terminals, with rules where they appear

$end (0) 0
'(' (40) 33
')' (41) 33
'*' (42) 36
'+' (43) 34
',' (44) 10 41
'-' (45) 35
':' (58) 9
';' (59) 2 6 7 8 14
'[' (91) 12 32 38
']' (93) 12 32 38
error (256) 8 16 40 42 47
PROG (258) 2
PERIOD (259) 2
VAR (260) 5
INT (261) 12 13
BOOL (262)
PRINT (263) 33
THEN (264) 25
IF (265) 26
DO (266) 29
ARRAY (267) 12
OF (268) 12
BEG (269) 22
END (270) 22
ASG (271) 30 41
EQ (272) 44
NEQ (273) 43
LT (274) 45
LEQ (275) 46
ELSE (276) 25
FOR (277) 29
ID (278) 2 10 11 31 32 37 38 41
ICONST (279) 12 39 41


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 2, on right: 0
$@1 (37)
    on left: 1, on right: 2
block (38)
    on left: 3, on right: 2
variables (39)
    on left: 4 5, on right: 3
vardcls (40)
    on left: 6 7 8, on right: 5 6
vardcl (41)
    on left: 9, on right: 6 7
idlist (42)
    on left: 10 11, on right: 9 10
type (43)
    on left: 12 13, on right: 9
stmtlist (44)
    on left: 14 15 16, on right: 14 22
stmt (45)
    on left: 17 18 19 20 21, on right: 14 15 25 29
cmpdstmt (46)
    on left: 22, on right: 3 21
ifstmt (47)
    on left: 25, on right: 17
$@2 (48)
    on left: 23, on right: 25
$@3 (49)
    on left: 24, on right: 25
ifhead (50)
    on left: 26, on right: 25
fstmt (51)
    on left: 29, on right: 18
$@4 (52)
    on left: 27, on right: 29
$@5 (53)
    on left: 28, on right: 29
astmt (54)
    on left: 30, on right: 19
lhs (55)
    on left: 31 32, on right: 30
writestmt (56)
    on left: 33, on right: 20
exp (57)
    on left: 34 35 36 37 38 39 40, on right: 30 32 33 34 35 36 38 43
    44 45 46
ctrlexp (58)
    on left: 41 42, on right: 29
condexp (59)
    on left: 43 44 45 46 47, on right: 26


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROG ID ';' block PERIOD

    PROG  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROG . ID ';' block PERIOD

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROG ID . ';' block PERIOD

    ';'  shift, and go to state 6


State 6

    2 program: $@1 PROG ID ';' . block PERIOD

    VAR  shift, and go to state 7

    $default  reduce using rule 4 (variables)

    block      go to state 8
    variables  go to state 9


State 7

    5 variables: VAR . vardcls

    error  shift, and go to state 10
    ID     shift, and go to state 11

    vardcls  go to state 12
    vardcl   go to state 13
    idlist   go to state 14


State 8

    2 program: $@1 PROG ID ';' block . PERIOD

    PERIOD  shift, and go to state 15


State 9

    3 block: variables . cmpdstmt

    BEG  shift, and go to state 16

    cmpdstmt  go to state 17


State 10

    8 vardcls: error . ';'

    ';'  shift, and go to state 18


State 11

   11 idlist: ID .

    $default  reduce using rule 11 (idlist)


State 12

    5 variables: VAR vardcls .
    6 vardcls: vardcls . vardcl ';'

    ID  shift, and go to state 11

    $default  reduce using rule 5 (variables)

    vardcl  go to state 19
    idlist  go to state 14


State 13

    7 vardcls: vardcl . ';'

    ';'  shift, and go to state 20


State 14

    9 vardcl: idlist . ':' type
   10 idlist: idlist . ',' ID

    ':'  shift, and go to state 21
    ','  shift, and go to state 22


State 15

    2 program: $@1 PROG ID ';' block PERIOD .

    $default  reduce using rule 2 (program)


State 16

   22 cmpdstmt: BEG . stmtlist END

    error  shift, and go to state 23
    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    FOR    shift, and go to state 26
    ID     shift, and go to state 27

    stmtlist   go to state 28
    stmt       go to state 29
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    fstmt      go to state 33
    astmt      go to state 34
    lhs        go to state 35
    writestmt  go to state 36


State 17

    3 block: variables cmpdstmt .

    $default  reduce using rule 3 (block)


State 18

    8 vardcls: error ';' .

    $default  reduce using rule 8 (vardcls)


State 19

    6 vardcls: vardcls vardcl . ';'

    ';'  shift, and go to state 37


State 20

    7 vardcls: vardcl ';' .

    $default  reduce using rule 7 (vardcls)


State 21

    9 vardcl: idlist ':' . type

    INT    shift, and go to state 38
    ARRAY  shift, and go to state 39

    type  go to state 40


State 22

   10 idlist: idlist ',' . ID

    ID  shift, and go to state 41


State 23

   16 stmtlist: error .

    $default  reduce using rule 16 (stmtlist)


State 24

   33 writestmt: PRINT . '(' exp ')'

    '('  shift, and go to state 42


State 25

   26 ifhead: IF . condexp

    error   shift, and go to state 43
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp      go to state 46
    condexp  go to state 47


State 26

   29 fstmt: FOR . $@4 ctrlexp $@5 DO stmt

    $default  reduce using rule 27 ($@4)

    $@4  go to state 48


State 27

   31 lhs: ID .
   32    | ID . '[' exp ']'

    '['  shift, and go to state 49

    $default  reduce using rule 31 (lhs)


State 28

   14 stmtlist: stmtlist . ';' stmt
   22 cmpdstmt: BEG stmtlist . END

    END  shift, and go to state 50
    ';'  shift, and go to state 51


State 29

   15 stmtlist: stmt .

    $default  reduce using rule 15 (stmtlist)


State 30

   21 stmt: cmpdstmt .

    $default  reduce using rule 21 (stmt)


State 31

   17 stmt: ifstmt .

    $default  reduce using rule 17 (stmt)


State 32

   25 ifstmt: ifhead . $@2 THEN stmt $@3 ELSE stmt

    $default  reduce using rule 23 ($@2)

    $@2  go to state 52


State 33

   18 stmt: fstmt .

    $default  reduce using rule 18 (stmt)


State 34

   19 stmt: astmt .

    $default  reduce using rule 19 (stmt)


State 35

   30 astmt: lhs . ASG exp

    ASG  shift, and go to state 53


State 36

   20 stmt: writestmt .

    $default  reduce using rule 20 (stmt)


State 37

    6 vardcls: vardcls vardcl ';' .

    $default  reduce using rule 6 (vardcls)


State 38

   13 type: INT .

    $default  reduce using rule 13 (type)


State 39

   12 type: ARRAY . '[' ICONST ']' OF INT

    '['  shift, and go to state 54


State 40

    9 vardcl: idlist ':' type .

    $default  reduce using rule 9 (vardcl)


State 41

   10 idlist: idlist ',' ID .

    $default  reduce using rule 10 (idlist)


State 42

   33 writestmt: PRINT '(' . exp ')'

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 56


State 43

   40 exp: error .
   47 condexp: error .

    THEN      reduce using rule 47 (condexp)
    $default  reduce using rule 40 (exp)


State 44

   37 exp: ID .
   38    | ID . '[' exp ']'

    '['  shift, and go to state 57

    $default  reduce using rule 37 (exp)


State 45

   39 exp: ICONST .

    $default  reduce using rule 39 (exp)


State 46

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   43 condexp: exp . NEQ exp
   44        | exp . EQ exp
   45        | exp . LT exp
   46        | exp . LEQ exp

    EQ   shift, and go to state 58
    NEQ  shift, and go to state 59
    LT   shift, and go to state 60
    LEQ  shift, and go to state 61
    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64


State 47

   26 ifhead: IF condexp .

    $default  reduce using rule 26 (ifhead)


State 48

   29 fstmt: FOR $@4 . ctrlexp $@5 DO stmt

    error  shift, and go to state 65
    ID     shift, and go to state 66

    ctrlexp  go to state 67


State 49

   32 lhs: ID '[' . exp ']'

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 68


State 50

   22 cmpdstmt: BEG stmtlist END .

    $default  reduce using rule 22 (cmpdstmt)


State 51

   14 stmtlist: stmtlist ';' . stmt

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    FOR    shift, and go to state 26
    ID     shift, and go to state 27

    stmt       go to state 69
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    fstmt      go to state 33
    astmt      go to state 34
    lhs        go to state 35
    writestmt  go to state 36


State 52

   25 ifstmt: ifhead $@2 . THEN stmt $@3 ELSE stmt

    THEN  shift, and go to state 70


State 53

   30 astmt: lhs ASG . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 71


State 54

   12 type: ARRAY '[' . ICONST ']' OF INT

    ICONST  shift, and go to state 72


State 55

   40 exp: error .

    $default  reduce using rule 40 (exp)


State 56

   33 writestmt: PRINT '(' exp . ')'
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ')'  shift, and go to state 73


State 57

   38 exp: ID '[' . exp ']'

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 74


State 58

   44 condexp: exp EQ . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 75


State 59

   43 condexp: exp NEQ . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 76


State 60

   45 condexp: exp LT . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 77


State 61

   46 condexp: exp LEQ . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 78


State 62

   34 exp: exp '+' . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 79


State 63

   35 exp: exp '-' . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 80


State 64

   36 exp: exp '*' . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 81


State 65

   42 ctrlexp: error .

    $default  reduce using rule 42 (ctrlexp)


State 66

   41 ctrlexp: ID . ASG ICONST ',' ICONST

    ASG  shift, and go to state 82


State 67

   29 fstmt: FOR $@4 ctrlexp . $@5 DO stmt

    $default  reduce using rule 28 ($@5)

    $@5  go to state 83


State 68

   32 lhs: ID '[' exp . ']'
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ']'  shift, and go to state 84


State 69

   14 stmtlist: stmtlist ';' stmt .

    $default  reduce using rule 14 (stmtlist)


State 70

   25 ifstmt: ifhead $@2 THEN . stmt $@3 ELSE stmt

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    FOR    shift, and go to state 26
    ID     shift, and go to state 27

    stmt       go to state 85
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    fstmt      go to state 33
    astmt      go to state 34
    lhs        go to state 35
    writestmt  go to state 36


State 71

   30 astmt: lhs ASG exp .
   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 30 (astmt)


State 72

   12 type: ARRAY '[' ICONST . ']' OF INT

    ']'  shift, and go to state 86


State 73

   33 writestmt: PRINT '(' exp ')' .

    $default  reduce using rule 33 (writestmt)


State 74

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   38    | ID '[' exp . ']'

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ']'  shift, and go to state 87


State 75

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   44 condexp: exp EQ exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 44 (condexp)


State 76

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   43 condexp: exp NEQ exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 43 (condexp)


State 77

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   45 condexp: exp LT exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 45 (condexp)


State 78

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   46 condexp: exp LEQ exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 46 (condexp)


State 79

   34 exp: exp . '+' exp
   34    | exp '+' exp .
   35    | exp . '-' exp
   36    | exp . '*' exp

    '*'  shift, and go to state 64

    $default  reduce using rule 34 (exp)


State 80

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   35    | exp '-' exp .
   36    | exp . '*' exp

    '*'  shift, and go to state 64

    $default  reduce using rule 35 (exp)


State 81

   34 exp: exp . '+' exp
   35    | exp . '-' exp
   36    | exp . '*' exp
   36    | exp '*' exp .

    $default  reduce using rule 36 (exp)


State 82

   41 ctrlexp: ID ASG . ICONST ',' ICONST

    ICONST  shift, and go to state 88


State 83

   29 fstmt: FOR $@4 ctrlexp $@5 . DO stmt

    DO  shift, and go to state 89


State 84

   32 lhs: ID '[' exp ']' .

    $default  reduce using rule 32 (lhs)


State 85

   25 ifstmt: ifhead $@2 THEN stmt . $@3 ELSE stmt

    $default  reduce using rule 24 ($@3)

    $@3  go to state 90


State 86

   12 type: ARRAY '[' ICONST ']' . OF INT

    OF  shift, and go to state 91


State 87

   38 exp: ID '[' exp ']' .

    $default  reduce using rule 38 (exp)


State 88

   41 ctrlexp: ID ASG ICONST . ',' ICONST

    ','  shift, and go to state 92


State 89

   29 fstmt: FOR $@4 ctrlexp $@5 DO . stmt

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    FOR    shift, and go to state 26
    ID     shift, and go to state 27

    stmt       go to state 93
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    fstmt      go to state 33
    astmt      go to state 34
    lhs        go to state 35
    writestmt  go to state 36


State 90

   25 ifstmt: ifhead $@2 THEN stmt $@3 . ELSE stmt

    ELSE  shift, and go to state 94


State 91

   12 type: ARRAY '[' ICONST ']' OF . INT

    INT  shift, and go to state 95


State 92

   41 ctrlexp: ID ASG ICONST ',' . ICONST

    ICONST  shift, and go to state 96


State 93

   29 fstmt: FOR $@4 ctrlexp $@5 DO stmt .

    $default  reduce using rule 29 (fstmt)


State 94

   25 ifstmt: ifhead $@2 THEN stmt $@3 ELSE . stmt

    PRINT  shift, and go to state 24
    IF     shift, and go to state 25
    BEG    shift, and go to state 16
    FOR    shift, and go to state 26
    ID     shift, and go to state 27

    stmt       go to state 97
    cmpdstmt   go to state 30
    ifstmt     go to state 31
    ifhead     go to state 32
    fstmt      go to state 33
    astmt      go to state 34
    lhs        go to state 35
    writestmt  go to state 36


State 95

   12 type: ARRAY '[' ICONST ']' OF INT .

    $default  reduce using rule 12 (type)


State 96

   41 ctrlexp: ID ASG ICONST ',' ICONST .

    $default  reduce using rule 41 (ctrlexp)


State 97

   25 ifstmt: ifhead $@2 THEN stmt $@3 ELSE stmt .

    $default  reduce using rule 25 (ifstmt)
